package com.github.hm1rafael.connection;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Map;

import com.github.hm1rafael.statement.IntegrationTestPreparedStatement;

public class IntegrationTestConnection extends IntegrationTestConnectionDoesNothingOperations implements Connection {

	private Map mapper;
	
	public IntegrationTestConnection(Map mapper) {
		this.mapper = mapper;
	}
	
	public Map getMapper() {
		return mapper;
	}
	
	@Override
	public Statement createStatement() throws SQLException {
		return new IntegrationTestPreparedStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return new IntegrationTestPreparedStatement(sql, this);
	}

	@Override
	public CallableStatement prepareCall(String sql) throws SQLException {
		return new IntegrationTestPreparedStatement(sql, this);
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return new IntegrationTestPreparedStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return new IntegrationTestPreparedStatement(sql, this);
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return new IntegrationTestPreparedStatement(sql, this);
	}
	
	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return new IntegrationTestPreparedStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return new IntegrationTestPreparedStatement(sql, this);
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return new IntegrationTestPreparedStatement(sql, this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return new IntegrationTestPreparedStatement(sql, this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return new IntegrationTestPreparedStatement(sql, this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return new IntegrationTestPreparedStatement(sql, this);
	}

}
